The Agent T+S project is a sophisticated transcription and summarization service that leverages cutting-edge AI models through a modern microservices architecture. At its core, the system orchestrates two primary AI models: OpenAI's Whisper Large V3 for audio transcription and Qwen 2.5 14B Instruct for intelligent text summarization.

The architecture follows a clean separation of concerns with FastAPI serving as the lightweight API layer that handles HTTP requests, file uploads, and job management. Instead of running models locally, the system delegates all heavy computational work to remote endpoints hosted on E2E Networks infrastructure, ensuring scalability and cost-effectiveness.

LangGraph acts as the workflow orchestrator, managing the complex state transitions between transcription and summarization tasks. It implements a state machine pattern that routes requests through different processing nodes based on the action type. The workflow supports both synchronous and asynchronous processing modes, with optional callbacks for real-time updates.

The transcription pipeline accepts audio files in various formats, processes them through the Whisper API with optional diarization support, and produces high-quality text transcripts. The summarization pipeline can work with either raw text input or transcripts from previous jobs, generating executive summaries, technical summaries, or custom summary types based on user requirements.

Job persistence is handled through a simple file-based storage system during development, with each job maintaining its complete state including inputs, results, timestamps, and error information. The system implements comprehensive error handling with detailed logging at every stage, ensuring robust operation and easy debugging.

Security considerations include API key authentication for remote model access, configurable callback secrets for webhook validation, and proper input sanitization to prevent injection attacks. The development setup includes CORS support for cross-origin requests and Swagger UI for interactive API documentation.

The project demonstrates best practices in modern Python development including type hints, async/await patterns, proper dependency injection, and clean code organization. It serves as an excellent example of how to build production-ready AI services without the overhead of hosting models locally.
